---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog'))
 .sort((a: { data: { pubDate: string | number | Date; }; }, b: { data: { pubDate: string | number | Date; }; }) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const allTags = posts.flatMap((post: { data: { tags: any; }; }) => post.data.tags || []);
const tagCounts = allTags.reduce((acc: { [x: string]: any; }, tag: string | number) => {
 acc[tag] = (acc[tag] || 0) + 1;
 return acc;
}, {} as Record<string, number>);

const popularTags = Object.entries(tagCounts)
 .sort(([, a], [, b]) => b - a)
 .slice(0, 10);

const recentPosts = posts.slice(0, 5);

// 継続日数を計算する関数
function calculateStreak(posts: any[]): number {
 if (posts.length === 0) return 0;
 
 const sortedPosts = [...posts].sort((a, b) => 
   new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
 );
 
 let streak = 0;
 const today = new Date();
 today.setHours(0, 0, 0, 0);
 
 const latestPost = new Date(sortedPosts[0].data.pubDate);
 latestPost.setHours(0, 0, 0, 0);
 
 const daysSinceLatest = Math.floor((today.getTime() - latestPost.getTime()) / (1000 * 60 * 60 * 24));
 if (daysSinceLatest > 1) return 0;
 
 let currentDate = new Date(latestPost);
 streak = 1;
 
 for (let i = 1; i < sortedPosts.length; i++) {
   const postDate = new Date(sortedPosts[i].data.pubDate);
   postDate.setHours(0, 0, 0, 0);
   
   const prevDate = new Date(currentDate);
   prevDate.setDate(prevDate.getDate() - 1);
   
   if (postDate.getTime() !== prevDate.getTime()) break;
   
   streak++;
   currentDate = postDate;
 }
 
 return streak;
}

const continuousStreak = calculateStreak(posts);
---

<Layout title="Daily Scraps">
 <main>
   <div class="hero">
     <h1>Daily Scraps</h1>
     <p>エンジニアの日々の学習記録・技術メモ</p>
   </div>

   <section class="recent-posts">
     <h2>最新の記事</h2>
     <ul class="post-list">
       {recentPosts.map((post: { id: string; data: { title: unknown; pubDate: string | number | Date; description: unknown; tags: string[]; }; }) => {
         const slug = post.id.replace(/\.(md|mdx)$/, '');
         return (
           <li class="post-item">
             <article>
               <h3>
                 <a href={`/daily-scraps/blog/${slug}/`}>{post.data.title}</a>
               </h3>
               <time>{new Date(post.data.pubDate).toLocaleDateString('ja-JP')}</time>
               <p>{post.data.description}</p>
               {post.data.tags && post.data.tags.length > 0 && (
                 <div class="tags">
                   {post.data.tags.map((tag: string) => (
                     <a href={`/daily-scraps/tags/${tag}/`} class="tag">#{tag}</a>
                   ))}
                 </div>
               )}
             </article>
           </li>
         );
       })}
     </ul>
     <a href="/daily-scraps/blog/" class="view-all">すべての記事を見る →</a>
   </section>

   <section class="popular-tags">
     <h2>人気のタグ</h2>
     <div class="tag-cloud">
       {popularTags.map(([tag, count]) => (
         <a href={`/daily-scraps/tags/${tag}/`} class="tag-item">
           <span class="tag-name">#{tag}</span>
           <span class="tag-count">{count}</span>
         </a>
       ))}
     </div>
   </section>

   <section class="stats">
     <h2>統計</h2>
     <div class="stat-grid">
       <div class="stat-card">
         <div class="stat-number">{posts.length}</div>
         <div class="stat-label">総記事数</div>
       </div>
       <div class="stat-card">
         <div class="stat-number">{Object.keys(tagCounts).length}</div>
         <div class="stat-label">タグ数</div>
       </div>
       <div class="stat-card">
         <div class="stat-number">{continuousStreak}</div>
         <div class="stat-label">継続日数</div>
       </div>
     </div>
   </section>
 </main>
</Layout>

<style>
 main {
   padding: 2rem;
   max-width: 900px;
   margin: 0 auto;
 }

 .hero {
   text-align: center;
   padding: 3rem 0;
   background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
   color: white;
   border-radius: 12px;
   margin-bottom: 2rem;
 }

 .hero h1 {
   font-size: 3rem;
   margin-bottom: 0.5rem;
 }

 section {
   margin: 3rem 0;
 }

 h2 {
   font-size: 1.8rem;
   margin-bottom: 1.5rem;
   padding-bottom: 0.5rem;
   border-bottom: 2px solid #e5e5e5;
 }

 .post-list {
   list-style: none;
   padding: 0;
 }

 .post-item {
   padding: 1.5rem;
   margin-bottom: 1rem;
   background-color: #f9f9f9;
   border-radius: 8px;
 }

 .post-item h3 {
   margin-bottom: 0.5rem;
 }

 .tags {
   display: flex;
   gap: 0.5rem;
   margin-top: 0.5rem;
 }

 .tag {
   padding: 0.25rem 0.5rem;
   background: #e5e5e5;
   border-radius: 1rem;
   font-size: 0.875rem;
   text-decoration: none;
 }

 .view-all {
   display: inline-block;
   margin-top: 1rem;
   font-weight: 600;
 }

 .tag-cloud {
   display: flex;
   flex-wrap: wrap;
   gap: 1rem;
 }

 .tag-item {
   display: flex;
   align-items: center;
   gap: 0.5rem;
   padding: 0.5rem 1rem;
   background-color: #f0f0f0;
   border-radius: 20px;
   text-decoration: none;
 }

 .tag-count {
   background-color: #667eea;
   color: white;
   padding: 0.2rem 0.5rem;
   border-radius: 12px;
   font-size: 0.875rem;
 }

 .stat-grid {
   display: grid;
   grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
   gap: 1rem;
 }

 .stat-card {
   background-color: #f9f9f9;
   padding: 1.5rem;
   border-radius: 8px;
   text-align: center;
 }

 .stat-number {
   font-size: 2.5rem;
   font-weight: bold;
   color: #667eea;
 }
</style>